VARIABLE NAMES

************************************************************************************
vpsc7.in

nElement 		1x1 		uint	1		number of elements, == 1 for VPSC
nPhase			1x1 		uint	1		number of phases
phaseFrac		nPhase x 1	double			phase fractions
gShapeControl	nPhase x 1	uint	0		grain shape control. 0,1,2,3,4 3 and 4 require MORPH file
iFragment		nPhase x 1	uint	0		0 = max aspect ratio enforced, 1 = grain fragmention invoked
critAspect		nPhase x 1 		uint	25		Critical aspect ratio for iFrag
axesRatio		nPhase x 3 	double	1,1,1	Initial aspect ratio, dummy for iShape 3,4
axesEuler		nPhase x 3 	double	0,0,0	Initial axes euler angles 
fnameTEX		nPhase x 1	str				TEX file names
fnameSX			nPhase x 1	str				SX file names
fnameMORPH		nPhase x 1	str				MORPH file names
errStress		1x1			double	0.001   Convergence parameter, relative tolerance
errStrainRateD	1x1			double	0.001   Convergence parameter, relative tolerance
errModuli		1x1			double	0.001   Convergence parameter, relative tolerance
errSecondOrder	1x1			double	0.001   Convergence parameter, relative tolerance
itMaxTot		1x1			uint	100		Total max iterations
itMaxExternal	1x1			uint	25		Max iterations in external convergence loop
itMaxInternalSO	1x1			uint	25		Max iterations in internal convergence loop
irsvar			1x1			uint	0		Controls external convergence loop
jrsini			1x1			uint	2		Controls external convergence loop, dummy if irsvar = 0
jrsfin			1x1			uint	10		Controls external convergence loop, dummy if irsvar = 0
jrstep			1x1			uint	2		Controls external convergence loop, dummy if irsvar = 0
iBCinv			1x1			uint	1		Convergence parameter, equation 5-40 (0) vs 5-41 (1) in manual
iRecover		1x1			uint	0		Uses Taylor stresses as initial guess for first step (0) or reads states from POSTMORT.IN (1)
iSave			1x1			uint	0		No POSTMORT.IN (0) or POSTMORT.IN at step n (n)
iCubeComp		1x1			uint	0		Calculates volume fractions associated with cubic components. Needs CUBCOMP.IN
nWrite			1x1			uint	0		Write tex to file at end(0) or every n steps (n)
iHardLaw		1x1			uint	3		interaction (0:FC,1:affine,2:secant,3:neff=10,4:tangent,5:SO)
updateOri		1x1			uint	1		Updates ori through simulation (1), does not update (0)
updateShape		1x1			uint	1		Updates grain shape through simulation (1), does not update (0)			
updateHard		1x1			uint	1		Updates hardening through simulation (1), does not update (0)
nNeigh			1x1			uint	0		number of neighbors for each grain
iFluct			1x1			uint	0		0: don't calc, 1: calc fluctuations
nProcess		1x1			uint	1		number of deformation processes
defProcess		nProcess x3	cell	1		Col 1: IVGVAR 	Col 2: Comment	Col 3: fnameDEF if needed
											* If IVGVAR=0 the code will enforce the same velocity gradient in every step. The
												load conditions are read from a PROCESS file: path\name are declared in this line
											* If IVGVAR=1 the code will call SUBROUTINE VAR_VEL_GRAD at each
												deformation step (see description in Section 2-3-2) and read the components of the
												velocity gradient UDOT and time increment TINCR from a file (typically, the
												deformation history of a given element generated by a FE code) whose path and name
												is declared in VPSC7.IN.
											* If IVGVAR=2 the code calculates a 2-dimensional projection of the Polycrystal
												Yield Surface, by probing the aggregate with strain-rate vectors contained in the
												projection subspace. Instead of a PROCESS file the user should provide in this line
												the two components (out of the 5 deviatoric components) defining the projection subspace
												(see Section 2-5 and EXAMPLE2).
											* If IVGVAR=-2 the code calculates a 5-dimensional Polycrystal Yield Surface, by
												probing the aggregate with regularly spaced strain-rate vectors or stress vectors.
												Codes prompt user to enter spacing and type of probe.
											* If IVGVAR=3 the code calculates the Lankford coefficient by simulating tensile
												tests in the (x1,x2) plane of the texture (see EXAMPLE2). Instead of a PROCESS file
												the user should provide in this line the angular increment (in degrees) for the tensile
												‘probing’, from the RD to the TD.
											* If IVGVAR=4 the code rotates rigidly the crystallographic and the morphologic
												texture of the grains. An example (see EXAMPLE10) is the simulation of an ECAE
												route, where after each pass the sample is rotated and reinserted in the die. The
												second line gives the path and name of a file containing the 3x3 rotation matrix to be
												used for the rigid rotation (see Section 2-3-3 for description).
pcysSection		1x2			uint	1 2		Section of stress space for PCYS
lankfordInc		1x1			uint	10		Angular increment for tensile probing during Lankford


********************************************************************************************************
SX file

matName			1x			char			Name of material
crySym			1x			char			Crystal symmetry
crystalAxes
crystalAngle
C				6x6			double			Stiffness
alpha			6x1			double			Thermal expansion
nModesTotal		1x1			uint			Number of modes in file
nModesActive	1x1			uint			Number of active modes
activeModes	 nModesActivex1 uint			Indices of active modes
modeX		 nModesTotalx1	uint			Mode indices
nsmX		 nModesTotalx1	uint
iOpSysX		 nModesTotalx1	uint
iTwTypeX	 nModesTotalx1	uint
modeLabels	 nModesTotalx1  cell			Label for each slip/twin modeLabels
modePlaneDir nModesTotalx   int			    Slip planes and slip directions for each mode
				nsmX x 6 or 8  				    Convert later to MTEX slip systems
twinShearRaw nModesTotalx1   double			twin shear for twin modes
constitutive    1x1   		uint	0		0: Voce, 1: MTS
iRateSens		1x1			uint	1		0: rate insensitive, 1: rate sensitive
grainSize		1x1			double	25		Only matters if HPfactor is non-zero							
nRSX		 nModesActivex1 uint	20		Mode rate sensitivity parameter
voce		 nModesActivex4 double			tau0, tau1, theta0, theta1 (Voce hardening parameters)
hpFactor	 nModesActivex1 double	0		Hall-Petch factor
latentHard	 nModesActive 	double	0		Latent hardening parameters for each mode
			  x nModesActive
iSecondTwin	 nModesActivex1 uint 	1		1: Allows or 0: disallows secondary twin reorientation
twThresh1	 nmodesActivex1 double  0.05	Threshold 1 in Predominant Twin Reorientation
twThresh2	 nModesActivex1	double	0.50	Threshold 2 in Predominant Twin	Reorientation 

********************************************************************************************************
STR file

strainVM     nStepx1		double			von Mises strain
stressVM	 nStepx1		double			von Mises stress
strain		 nStepx3x3		double			strain
stress		 nStepx3x3		double			Cauchy stress





















